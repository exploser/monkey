package main

import (
	"fmt"
	"strings"

	"git.exsdev.ru/ExS/monkey/evaluator"
	"git.exsdev.ru/ExS/monkey/lexer"
	"git.exsdev.ru/ExS/monkey/parser"
	"github.com/gopherjs/vecty"
	"github.com/gopherjs/vecty/elem"
	"github.com/gopherjs/vecty/event"
	"github.com/microcosm-cc/bluemonday"
	"github.com/russross/blackfriday"
)

func main() {
	vecty.SetTitle("Markdown Demo")
	vecty.RenderBody(&PageView{
		Input: ``,
	})
}

// PageView is our main page component.
type PageView struct {
	vecty.Core
	Input string
}

func EvalProgram(input string) string {
	env := evaluator.GetBaseEnvironment()
	out := strings.Builder{}
	for n, line := range strings.Split(input, "\n") {
		out.WriteString(fmt.Sprintf("%d: ", n))
		l := lexer.New(line)
		p := parser.New(l)

		prog := p.ParseProgram()
		for _, e := range p.Errors() {
			out.WriteString(e.Error())
			out.WriteString("; ")
		}

		evaluated := evaluator.Eval(prog, env)
		if evaluated == nil {
			out.WriteString("eval: (nil); ")
			continue
		}

		out.WriteString(evaluated.String())
		out.WriteRune('\n')
	}

	return out.String()
}

// Render implements the vecty.Component interface.
func (p *PageView) Render() vecty.ComponentOrHTML {
	return elem.Body(
		// Display a textarea on the right-hand side of the page.
		elem.Div(
			elem.TextArea(
				vecty.Markup(
					vecty.Style("font-family", "monospace"),
					vecty.Property("rows", 14),
					vecty.Property("cols", 70),

					// When input is typed into the textarea, update the local
					// component state and rerender.
					event.Input(func(e *vecty.Event) {
						p.Input = e.Target.Get("value").String()
						vecty.Rerender(p)

						// repl.Start(&in, &out)
					}),
				),
				vecty.Text(p.Input), // initial textarea text.
			),
		),

		// Render the markdown.
		elem.Div(
			elem.Preformatted(
				vecty.Markup(
					vecty.Style("font-family", "monospace"),
				),
				vecty.Text(EvalProgram(p.Input)), // initial textarea text.
			),
		),
	)
}

// Markdown is a simple component which renders the Input markdown as sanitized
// HTML into a div.
type Markdown struct {
	vecty.Core
	Input string `vecty:"prop"`
}

// Render implements the vecty.Component interface.
func (m *Markdown) Render() vecty.ComponentOrHTML {
	// Render the markdown input into HTML using Blackfriday.
	unsafeHTML := blackfriday.MarkdownCommon([]byte(m.Input))

	// Sanitize the HTML.
	safeHTML := string(bluemonday.UGCPolicy().SanitizeBytes(unsafeHTML))

	// Return the HTML, which we guarantee to be safe / sanitized.
	return elem.Div(
		vecty.Markup(
			vecty.UnsafeHTML(safeHTML),
		),
	)
}
